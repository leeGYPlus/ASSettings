<application>
  <component name="AppStorage">
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="Utility method for finding an internal RecyclerView, if present" />
      <item value="alidate" />
      <item value="Does a dry run, finds the ViewHolder but does not remove" />
      <item value="non-invalid" />
      <item value="exact" />
      <item value="Try first for an exact, non-invalid match from scrap" />
      <item value="traversal" />
      <item value="resolve layout direction" />
      <item value="resolve" />
      <item value="scroll to fulfill requirements like stack from bottom" />
      <item value="scroll to fulfill requirements like stack from bottom. create layout state" />
      <item value="by checking children and other variables, find an anchor coordinate and an anchor item position." />
      <item value="fill towards start, stacking from bottom" />
      <item value="eligible" />
      <item value="cookie" />
      <item value="If play store continues auto updating an app, we want to show partial result." />
      <item value="Elderly Man Mode" />
      <item value="Provisione" />
      <item value="Elderly" />
      <item value="Algorithm" />
      <item value="scrap" />
      <item value="Transient" />
      <item value="Views in mActiveViews represent a contiguous range of Views, with position of the first view store in mFirstActivePosition." />
      <item value="Unsorted views that can be used by the adapter as a convert view." />
      <item value="The RecycleBin facilitates reuse of views across layouts. The RecycleBin has two levels of storage: ActiveViews and ScrapViews. ActiveViews are those views which were onscreen at the start of a layout. By construction, they are displaying current information. At the end of layout, all views in ActiveViews are demoted to ScrapViews. ScrapViews are old views that could potentially be used by the adapter to avoid allocating views unnecessarily." />
      <item value="Base class that can be used to implement virtualized lists of items. A list does not have a spatial definition here. For instance, subclasses of this class can display the content of the list in a grid, in a carousel, as stack, etc." />
      <item value="transitive" />
      <item value="&lt;p&gt;This can be used as a reasonable signal that the view is about to be seen by the user. If the adapter previously freed any resources in {@link onViewDetachedFromWindow(RecyclerView.ViewHolder) onViewDetachedFromWindow} those resources should be restored here.&lt;p&gt;" />
      <item value="retrieve" />
      <item value="Panel" />
      <item value="persistent" />
      <item value="Sensor" />
      <item value="Prior to API 29 and to maintain compatibility with older versions of ProcessLifecycleOwner (which may not be updated when lifecycle-runtime is updated and need to support activities that don't extend from FragmentActivity from support lib), use a framework fragment to get the correct timing of Lifecycle events roid.app.FragmentManager manager = activity.getFragmentManager();" />
      <item value="Reentrance" />
      <item value="Invariant: at any moment of time for observer1 &amp; observer2: if addition_order(observer1) &lt; addition_order(observer2), then state(observer1) &gt;= state(observer2)," />
      <item value="Invariant" />
      <item value="Add the icons for the supplied apk called packageName." />
      <item value="transition" />
      <item value="seat" />
      <item value="Container to ease passing around a tuple of two objects. This object provides a sensible implementation of equals(), returning true if equals() is true on each of the contained objects." />
      <item value="The given closure is executed against this project's {@link ScriptHandler}" />
      <item value="populate" />
      <item value="populated" />
      <item value="&lt;p&gt;A {@code Rule} represents some action to perform when an unknown domain object is referenced. The rule can use the domain object name to add an implicit domain object.&lt;p&gt;" />
      <item value="&lt;p&gt;This annotation should be attached to the getter method in Java or the property in Groovy. Annotations on setters or just the field in Java are ignored.&lt;p&gt;" />
      <item value="Marks a property as specifying an output file for a task." />
      <item value="&lt;p&gt;This will cause the task to be considered out-of-date when the file path or contents are different to when the task was last run.&lt;p&gt;" />
      <item value="Visits a LDC instruction" />
      <item value="Visits a method instruction. A method instruction is an instruction that invokes a method." />
      <item value="Visits the nest host class of the class" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="34" />
        <entry key="ENGLISH" value="35" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1628145474375" />
  </component>
</application>